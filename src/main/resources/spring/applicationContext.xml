<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:jaxws="http://cxf.apache.org/jaxws"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/task
	   http://www.springframework.org/schema/task/spring-task-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/cache
       http://www.springframework.org/schema/cache/spring-cache.xsd
       http://cxf.apache.org/jaxws
       http://cxf.apache.org/schemas/jaxws.xsd">
<!--    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>-->

    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="com.ctpsp"></context:component-scan>

    <context:annotation-config/>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--引入配置文件-->
    <context:property-placeholder location="classpath:*.properties"/>

    <!--配置数据库-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" init-method="init">
        <property name="driverClassName" value="${spring.jdbc.driver}"/>
        <property name="url" value="${spring.jdbc.url}"/>
        <property name="username" value="${spring.jdbc.username}"/>
        <property name="password" value="${spring.jdbc.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${dbcp.initialSize}"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${dbcp.maxActive}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${dbcp.maxWait}"/>
        <!-- 连接池最大空闲 -->
        <!--<property name="maxIdle" value="${dbcp.maxIdle}"/>-->
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${dbcp.minIdle}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}"/>
        <property name="testWhileIdle" value="${testWhileIdle}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="testOnReturn" value="${testOnReturn}"/>
        <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}"/>
        <property name="validationQuery" value="${validationQuery}"/>
        <!-- 监控数据库 -->
        <property name="filters" value="mergeStat,slf4j"/>
    </bean>

    <!--所有的Mapper都要继承SqlMapper-->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ctpsp.dao"/>
        <!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
        <!--<property name="markerInterface" value="com.ctpsp.common.util.MyMapper"/>-->
        <!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口-->
        <property name="properties">
            <value>
                mappers=com.ctpsp.common.util.MyMapper
            </value>
        </property>

    </bean>

    <!--这里把mapper下的所有的mapper.xml文件全部引进来-->
    <!--    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" lazy-init="false">
            <property name="dataSource" ref="dataSource"/>
            <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"/>
            <property name="mapperLocations">
                <list>
                    <value>classpath:mapper/*.xml</value>
                </list>
            </property>
        </bean>-->

    <!--    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
            <constructor-arg index="0" ref="sqlSessionFactory"/>
        </bean>-->

    <!-- 前台的事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--注入jdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>


    <!--    &lt;!&ndash;支持各任务同时执行,并设置poolSize&ndash;&gt;
        &lt;!&ndash; 这里只放一个强制使用单线程避免重复跑任务 &ndash;&gt;
        <task:scheduler id="scheduler" pool-size="1" />
        <task:scheduled-tasks scheduler="scheduler" >
             &lt;!&ndash; 从数据库中取出字段写到xml中 &ndash;&gt;
           <task:scheduled ref="taskConf" method="dataBaseToXml"
                               cron="0 0/1 * * * ?"/>
        </task:scheduled-tasks>-->

    <!-- 统一的异常处理 -->
    <!--<bean id="exceptionResolver" class="com.ctpsp.common.handler.ExceptionHandler" />-->
    <jaxws:endpoint id="sendServie" implementor="com.ctpsp.service.impl.SendServiceImpl" address="/sendServie"/>

</beans>